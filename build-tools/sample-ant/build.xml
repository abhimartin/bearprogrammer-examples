<project name="sample-ant" default="build" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- Proxy configuration here: <setproxy proxyhost="yourserver.com" proxyport="8080"/> -->

	<!--############-->
	<!-- Properties -->
	<!--############-->
	<property name="main.class" value="com.bearprogrammer.blog.buildtool.Application" />
	
    <property name="build.dir" value="build" />
	<property name="dist.dir" value="${build.dir}/dist" />
	<property name="reports.dir" value="${build.dir}/reports" />
	<property name="test.reports.dir" value="${reports.dir}/test" />
	
	<property name="lib.dir" value="${build.dir}/lib" />

	<property name="main.resources.dir" value="src/main/resources" />
	<property name="main.resources.output" value="${build.dir}/resources/main" />
	<property name="main.src.dir" value="src/main/java" />
	<property name="main.src.output" value="${build.dir}/classes/main" />
	
	<property name="main.bin.dir" value="src/main/bin" />
	<property name="main.bin.output" value="${build.dir}/resources/bin" />
	
	<property name="test.resources.dir" value="src/test/resources" />
	<property name="test.resources.output" value="${build.dir}/resources/test" />
    <property name="test.src.dir" value="src/test/java" />
	<property name="test.src.output" value="${build.dir}/classes/test" />
	
	<property name="jar.name" value="${ant.project.name}.jar" />
	<property name="jar.file" value="${dist.dir}/${jar.name}" />
	
	<property name="zip.name" value="${ant.project.name}.zip" />
	<property name="zip.file" value="${dist.dir}/${zip.name}" />
	
	<property name="log.application.level" value="debug" />
	<property name="log.other.level" value="error" />
	
	<!--############-->
	<!-- Classpaths -->
	<!--############-->
	<path id="classpath.main.compile">
		<fileset dir="${lib.dir}/compile" erroronmissingdir="false" />
	</path>
	
	<path id="classpath.main.run">
		<path refid="classpath.main.compile" />
		<pathelement location="${main.src.output}" />
		<pathelement location="${main.resources.output}" />
		<fileset dir="${lib.dir}/run" erroronmissingdir="false" />
	</path>
	
	<path id="classpath.test.compile">
		<path refid="classpath.main.compile" />
		<pathelement location="${main.src.output}" />
		<fileset dir="${lib.dir}/testCompile" erroronmissingdir="false" />
	</path>
	
	<path id="classpath.test.run">
		<path refid="classpath.main.run" />
		<path refid="classpath.test.compile" />
		<pathelement location="${test.src.output}" />
		<pathelement location="${test.resources.output}" />
		<fileset dir="${lib.dir}/testRun" erroronmissingdir="false"  />
	</path>
	
	<!--#########-->
	<!-- Targets -->
	<!--#########-->
	<target name="assemble" depends="check, compile, processResources" description="Assemble the jar file and zip file to run the application from.">
		<mkdir dir="${dist.dir}" />
		<jar destfile="${jar.file}" filesetmanifest="merge">
			<fileset dir="${main.resources.output}" erroronmissingdir="false" />
			<fileset dir="${main.src.output}" erroronmissingdir="false"  />
		</jar>
		<zip destfile="${zip.file}" duplicate="preserve">
			<zipfileset dir="${main.bin.output}" prefix="bin" filemode="755" />
			<zipfileset file="${jar.file}" prefix="lib" />
			<zipfileset dir="${lib.dir}/run" prefix="lib" />
		</zip>
	</target>
	
	<target name="build" 
		depends="check, compile, compileTest, processResources, processTestResources, test, assemble" 
		description="Build the whole project." />
	
	<target name="check" description="Check for directories and decide what tasks need to run.">
		<available file="${main.src.dir}" property="should.compile" />
		<condition property="should.processResources">
			<or>
				<available file="${main.bin.dir}" />
				<available file="${main.resources.dir}" />
			</or>
		</condition>
		<available file="${test.src.dir}" property="should.compileTest" />
		<available file="${test.resources.dir}" property="should.processTestResources" />
	</target>
	
	<target name="clean" description="Clean all artifacts and directories generated by this build.">
		<delete dir="${build.dir}"/>
	</target>
	
	<target name="compile" depends="check, resolve" if="should.compile" description="Compile the java code." >
		<mkdir dir="${main.src.output}" />
		<javac 
			srcdir="${main.src.dir}" 
			destdir="${main.src.output}"
			classpathref="classpath.main.compile" 
			includeAntRuntime="false" 
			debug="true" />
	</target>
	
	<target name="compileTest" depends="check, resolve, compile" if="should.compileTest" description="Compile unit test java code." >
		<mkdir dir="${test.src.output}" />
		<javac srcdir="${test.src.dir}" destdir="${test.src.output}" classpathref="classpath.test.compile" includeAntRuntime="false" />
		<property name="should.runTest" value="true" />
	</target>
	
	<target name="processResources" depends="check, resolve" description="Copy resources." if="should.processResources">
		<mkdir dir="${main.resources.output}" />
		<copy todir="${main.resources.output}">
			<fileset dir="${main.resources.dir}"/>
			<filterset>
				<filter token="log.application.level" value="${log.application.level}" />
				<filter token="log.other.level" value="${log.other.level}" />
			</filterset>
		</copy>
		
		<mkdir dir="${main.bin.output}" />
		<pathconvert pathsep=":" property="unixClasspath" refid="classpath.main.run" targetos="unix">
			<chainedmapper>
				<flattenmapper/>
				<globmapper from="*" to="$APP_HOME/lib/*"/>
			</chainedmapper>
		</pathconvert>
		<pathconvert pathsep=";" property="winClasspath" refid="classpath.main.run" targetos="windows">
			<chainedmapper>
				<flattenmapper/>
				<globmapper from="*" to="%APP_HOME%\lib\*"/>
			</chainedmapper>
		</pathconvert>
		<copy todir="${main.bin.output}">
			<fileset dir="${main.bin.dir}"/>
			<filterset>
				<filter token="__UNIX_CLASSPATH__" value="${unixClasspath}:$APP_HOME/lib/${jar.name}" />
				<filter token="__WIN_CLASSPATH__" value="${winClasspath};%APP_HOME%\lib\${jar.name}" />
				<filter token="__MAIN_CLASS__" value="${main.class}" />
			</filterset>
		</copy>
	</target>
	
	<target name="processTestResources" depends="check" description="Copy test resources." if="should.processTestResources">
		<mkdir dir="${test.resources.output}" />
		<copy todir="${test.resources.output}">
			<fileset dir="${test.resources.dir}"/>
		</copy>
	</target>
	
	<target name="resolve" description="Retrieve Ivy dependencies.">
        <ivy:retrieve pattern="${lib.dir}/[conf]/[artifact]-[revision].[ext]" />
    </target>
	
	<target name="run" depends="check, compile, processResources" description="Run the application.">
		<java fork="true" classname="${main.class}">
			<classpath>
				<path refid="classpath.main.run" />
			</classpath>
		</java>
	</target>
	
	<target name="test" depends="compileTest, processResources, processTestResources" if="should.runTest" 
			description="Run the unit tests and generate the reports.">
		<mkdir dir="${test.reports.dir}" />
		<mkdir dir="${build.dir}/temp" />
		<mkdir dir="${reports.dir}/jacoco" />
		<jacoco:coverage output="file" destfile="${reports.dir}/jacoco.exec">
			<junit fork="yes" dir="${build.dir}/temp" failureproperty="testFailed" tempdir="${build.dir}/temp">
				<classpath>
					<path refid="classpath.test.run" />
				</classpath>
				<batchtest todir="${test.reports.dir}">
					<formatter type="xml"/>
					<fileset dir="${test.src.dir}">
						<include name="**/Test*.java" />
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>
		<junitreport todir="${test.reports.dir}">
			<fileset dir="${test.reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${reports.dir}/html"/>
		</junitreport>
		<jacoco:report>
			<executiondata>
				<file file="${reports.dir}/jacoco.exec"/>
			</executiondata>
			<structure name="${ant.project.name}">
				<classfiles>
					<fileset dir="${main.src.output}">
						<include name="**/*.class"/>
					</fileset>
				</classfiles>
				<sourcefiles>
					<fileset dir="${main.src.dir}">
						<include name="**/*.java"/>
					</fileset>
				</sourcefiles>
			</structure>
			<html destdir="${reports.dir}/jacoco"/>
		</jacoco:report>
		<fail if="testFailed" message="There were unit tests failures." />
	</target>
	
</project>