package com.bearprogrammer.blog.webmvc.model;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class ContactDAO {

	public List<Contact> findAll() throws DataAccessException {
		Connection conn = null;
		try {
			conn = Database.getConnection();
			
			List<Contact> result = new ArrayList<Contact>();
			
			ResultSet rs = conn.createStatement().executeQuery("select * from contact order by name");
			while (rs.next()) {
				result.add(fromResultSet(rs));
			}
			
			return result;
		} catch (SQLException sqle) {
			throw new DataAccessException("Error while loading all contacts.", sqle);
		} finally {
			Database.closeConnection(conn);
		}
	}
	
	public Contact findOne(Integer id) throws DataAccessException {
		Connection conn = null;
		try {
			conn = Database.getConnection();
			
			Contact result = null;
			
			PreparedStatement ps = conn.prepareStatement("select * from contact where id = ?");
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			
			if (rs.next()) {
				result = fromResultSet(rs);
			} else {
				throw new DataAccessException("Contact not found, id: " + id);
			}
			
			return result;
		} catch (SQLException sqle) {
			throw new DataAccessException("Error while loading contact.", sqle);
		} finally {
			Database.closeConnection(conn);
		}
	}

	/**
	 * Map data in a <code>ResultSet</code> to a {@link Contact}.
	 * 
	 * @param rs
	 *            Result set to read data from.
	 * @return The contact loaded.
	 * @throws SQLException
	 *             If any exception happens while retrieving the data.
	 */
	private Contact fromResultSet(ResultSet rs) throws SQLException {
		Contact contact = new Contact();
		contact.setId(rs.getInt("id"));
		contact.setName(rs.getString("name"));
		contact.setEmail(rs.getString("email"));
		return contact;
	}

	public Contact save(Contact contact) throws DataAccessException {
		Connection conn = null;
		try {
			conn = Database.getConnection();
			
			String query = null;
			
			// If no ID, create new contact
			if (contact.getId() == null) {
				// Using auto increment, ID will be generated
				query = "insert into contact (name, email) values (?,?)";
				
			} else { // Update
				query = "update contact set name = ?, email = ? where id = ?";
			}
			
			// Create the prepared statement
			PreparedStatement ps = conn.prepareStatement(query);
			ps.setString(1, contact.getName());
			ps.setString(2, contact.getEmail());
			
			if (contact.getId() != null) {
				// ID only if updating
				ps.setInt(3, contact.getId());
			}
			
			// Execute update
			ps.executeUpdate();
			
			/* This will retrieve the ID generated by the
			 * auto increment. If it was an update, the
			 * result set will be empty.
			 */
			ResultSet rs = ps.getGeneratedKeys();
			if (rs.next()) {
				contact.setId(rs.getInt(1));
			}
			
			return contact;
		} catch (SQLException sqle) {
			throw new DataAccessException("Error while saving contact.", sqle);
		} finally {
			Database.closeConnection(conn);
		}
	}
	
}
