<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
		
	<!-- Custom filter bean -->
	<beans:bean id="createFirstUserFilter" 
		class="com.bearprogrammer.spring.security.firstuser.filter.CreateFirstUserFilter"
		init-method="start" />
		
	<!-- Using a SHA-1 password encoder -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />
	
	<http pattern="/css/**" security="none"/>
	<http pattern="/js/**" security="none"/>
	
	<!-- 
		auto-config="true": auto configure as far as possible
		use-expressions="true": use expression to determine who can access what 
	-->
	<http auto-config="true" use-expressions="true">
		<!-- Pages that everyone can access -->
		<intercept-url pattern="/login.do" access="isAnonymous()" />
		<intercept-url pattern="/logout.do" access="isAnonymous()" />
		
		<!-- First user creation -->
		<intercept-url pattern="/firstUser/**" access="hasRole('firstuser')" />
		
		<!-- All other pages needs an authenticated user -->
		<intercept-url pattern="/**" access="isFullyAuthenticated()" />

		<!-- 
			This is where the custom filter is being added. It's being added
			just before authentication happens, that way, we already have a
			valid security context but not tried to authenticate yet. 
		-->		
		<custom-filter ref="createFirstUserFilter" before="FORM_LOGIN_FILTER"  />
		
		<!-- 
			Configure the custom login page.
			login-page="/login.do": where the user will be redirected when 
				a login page needs to be rendered
		-->
		<form-login login-page="/login.do" />
		
		<!-- 
			Configure the custom logout page.
			invalidate-session="true": invalidate user session after logout
			logout-success-url="/logout.do": where the user will be redirected to
				after a successful logout
		-->
		<logout invalidate-session="true" logout-success-url="/logout.do" />
	</http>

	<authentication-manager>
		<!-- Using the customized user repository as the authentication manager. -->
		<authentication-provider user-service-ref="userRepository">
			<!-- Password encoder is configured above. -->
			<password-encoder ref="passwordEncoder">
				<!-- 
					It will use the username as the salt, this is important because its the behavior in
					the save method of the customized user repository. If not setup correctly, it will
					never match the password. 
				-->
				<salt-source user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>

</beans:beans>
