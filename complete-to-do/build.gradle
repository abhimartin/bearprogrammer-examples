////////// PLUGINS /////////////
apply plugin : 'eclipse'
apply plugin : 'eclipse-wtp'
apply plugin : 'java'
apply plugin : 'jacoco'
apply plugin : 'war'
apply plugin : 'org.akhikhl.gretty'

////////// BUILD SCRIPT CONFIGURATION /////////////
buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'org.akhikhl.gretty:gretty:1.0.0'
  }
}

////////// CONFIGURATION /////////////
configurations {
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    
    integrationTestCompile.extendsFrom functionalTestCompile
    integrationTestRuntime.extendsFrom functionalTestRuntime
}

sourceSets {
	functionalTest {
		java {
			compileClasspath += main.output
            runtimeClasspath += main.output
		}
	}
    integrationTest {
		java {
			compileClasspath += main.output
            runtimeClasspath += main.output
			compileClasspath += functionalTest.output
            runtimeClasspath += functionalTest.output
		}
	}
}

////////// DEPENDENCIES /////////////
repositories {
  jcenter()
  mavenCentral()
}

dependencies {
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'jstl:jstl:1.2'
	compile 'org.apache.commons:commons-lang3:3.3.2'
    compile 'org.flywaydb:flyway-core:3.0'
    compile 'org.hibernate:hibernate-entitymanager:4.3.5.Final'
    compile 'org.hibernate:hibernate-validator:5.1.1.Final'
    compile 'org.slf4j:slf4j-api:1.7.6'
    compile 'org.springframework.data:spring-data-jpa:1.5.2.RELEASE'
    compile 'org.springframework:spring-webmvc:4.0.5.RELEASE'
    compile 'org.springframework.security:spring-security-web:3.2.4.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.2.4.RELEASE'
    compile 'org.springframework.security:spring-security-ldap:3.2.4.RELEASE'
    
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    runtime 'mysql:mysql-connector-java:5.1.31'
    runtime 'org.apache.directory.server:apacheds-server-jndi:1.5.5'

    testCompile 'junit:junit:4.11'
    testCompile 'org.assertj:assertj-core:1.6.1'
    testCompile 'org.mockito:mockito-core:1.9.5'
    
    functionalTestCompile 'org.springframework:spring-test:4.0.5.RELEASE'

    integrationTestCompile 'info.cukes:cucumber-java:1.1.6'
    integrationTestCompile 'info.cukes:cucumber-junit:1.1.6'
    integrationTestCompile 'info.cukes:cucumber-spring:1.1.6'
    integrationTestCompile 'org.seleniumhq.selenium:selenium-java:2.41.0'
}

////////// PLUGIN CONFIGURATION /////////////
eclipse {
    classpath {
        plusConfigurations += configurations.integrationTestCompile
    }
}

gretty {
	jvmArgs = ['-Dspring.profiles.active=test']
    integrationTestTask = 'integrartionTest'
    servletContainer = 'tomcat7'
    
    afterEvaluate {
    	// Add integration test classes to Jetty's war
    	tasks['prepareInplaceWebApp'].dependsOn 'copyIntegrationTestClasses', 'copyIntegrationTestResources'
    }
}

jacocoTestReport {
    executionData = fileTree(dir:"${buildDir}/jacoco/", include:"*.exec")
}

test {
    reports.junitXml.destination = "$buildDir/test-results/unit"
    reports.html.destination = "$buildDir/reports/tests/unit"
}


////////// CUSTOM TASKS /////////////
task copyIntegrationTestClasses(type:Copy, dependsOn: [functionalTestClasses, integrationTestClasses]) {
	from 'build/classes/functionalTest/'
	into 'build/inplaceWebapp/WEB-INF/classes'
	
	from 'build/classes/integrationTest/'
	into 'build/inplaceWebapp/WEB-INF/classes'
	
	include '**/IntegrationTestDatabaseConfiguration*'
	include '**/DatabaseCleaner*'
}

task copyIntegrationTestResources(type:Copy, dependsOn: integrationTestClasses) {
	from 'build/resources/integrationTest/'
	into 'build/inplaceWebapp/WEB-INF/classes'
}

task functionalTest(type:Test, dependsOn: functionalTestClasses){
    check.dependsOn it
    classpath = project.sourceSets.functionalTest.runtimeClasspath
    mustRunAfter test // We don't want to run functional tests if unit tests don't pass
    testClassesDir = file(project.sourceSets.functionalTest.output.classesDir)
    reports.junitXml.destination = "$buildDir/test-results/functional"
    reports.html.destination = "$buildDir/reports/tests/functional"
}

task integrartionTest (type:JavaExec, dependsOn:integrationTestClasses) {
	check.dependsOn it
    args = ['--strict', '-f', "html:${buildDir}/reports/tests/integration", '--glue', 'com.bearprogrammer.blog.sample.integrationTest.glue', 'src/integrationTest/features']
    classpath = project.sourceSets.integrationTest.runtimeClasspath
    description = "Run integration tests. Add your features to src/integrationTest/features. Your step definitions should go inside package com.bearprogrammer.blog.sample.integrationTest.glue and your java classes to src/integrationTest/java."
    group = 'Verification'
    main = 'cucumber.api.cli.Main'
    mustRunAfter functionalTest // We don't want to run integration tests if functional test haven't past 
    inputs.files fileTree(dir:'src/integrationTest/features',include:'**/*.feature')
    outputs.files "${buildDir}/reports/tests/integration"
    
    if (project.hasProperty('webdriver')) {
    	jvmArgs = ["-Dwebdriver=${webdriver}",'-Dspring.profiles.active=test']
    }
}